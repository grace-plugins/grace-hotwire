buildscript {
    repositories {
        mavenCentral()
    }
}

ext."signing.keyId" = project.hasProperty("signing.keyId") ? project.getProperty('signing.keyId') : System.getenv('SIGNING_KEY')
ext."signing.password" = project.hasProperty("signing.password") ? project.getProperty('signing.password') : System.getenv('SIGNING_PASSPHRASE')
ext."signing.secretKeyRingFile" = project.hasProperty("signing.secretKeyRingFile") ? project.getProperty('signing.secretKeyRingFile') : ("${System.properties['user.home']}${File.separator}.gnupg${File.separator}secring.gpg")
ext.isReleaseVersion = !projectVersion.endsWith("SNAPSHOT")

version projectVersion
group "org.graceframework.plugins"

apply plugin: "eclipse"
apply plugin: "idea"
apply plugin: "groovy"
apply plugin: "org.graceframework.grace-plugin"
apply plugin: "org.graceframework.grace-gsp"
apply plugin: "org.graceframework.asset-pipeline"
apply plugin: "maven-publish"
apply plugin: "signing"

repositories {
    mavenCentral()
}

dependencies {
    compileOnly "org.springframework.boot:spring-boot-autoconfigure"
    compileOnly "javax.servlet:javax.servlet-api"
    compileOnly "org.graceframework:grace-core"
    compileOnly "org.graceframework:grace-web-common"
    compileOnly "org.graceframework:grace-web-gsp"
    compileOnly "org.graceframework:grace-web-sitemesh"
}

tasks.withType(Sign) {
   onlyIf { isReleaseVersion }
}

tasks.withType(GroovyCompile) {
    configure(groovyOptions) {
        forkOptions.jvmArgs = ['-Xmx1024m']
    }
}

tasks.withType(Test) {
    useJUnitPlatform()
}

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
    withJavadocJar()
    withSourcesJar()
}

jar {
    manifest.mainAttributes(
        "Built-By": System.properties['user.name'],
        "Created-By": System.properties['java.vm.version'] + " (" + System.properties['java.vm.vendor'] + ")",
        "Implementation-Title": "Grace Turbo Plugin",
        "Implementation-Version": projectVersion,
        "Implementation-Vendor": 'Grace Plugins')
    enabled = true
    archiveClassifier.set('plugin')
    includeEmptyDirs = false
}

assets {
    assetsPath = 'app/assets'
    minifyJs = false
    minifyCss = true
    minifyOptions = [
        languageMode: 'ES5',
        targetLanguage: 'ES5',
        optimizationLevel: 'SIMPLE'
    ]
    packagePlugin = true
}

publishing {
    publications {
        maven(MavenPublication) {
            groupId = project.group
            artifactId = projectName
            version = project.version

            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }

            from components.java

            artifact source: "${project.sourceSets.main.groovy.outputDir}/META-INF/grails-plugin.xml",
                classifier: "plugin",
                extension: 'xml'
            pom {
                name = "Grace Turbo Plugin"
                description = "Grace Plugin for using Turbo with Grace."
                url = 'https://github.com/grace-plugins/grace-hotwire'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'https://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'rainboyan'
                        name = 'Michael Yan'
                        email = 'rain@rainboyan.com'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/grace-plugins/grace-hotwire.git'
                    developerConnection = 'scm:git:ssh://github.com:grace-plugins/grace-hotwire.git'
                    url = 'https://github.com/grace-plugins/grace-hotwire'
                }
            }

            pom.withXml {
                def pomNode = asNode()

                try {
                    pomNode.dependencyManagement.replaceNode {}
                } catch (Throwable e) {
                    // ignore
                }

                // simply remove dependencies without a version
                // version-less dependencies are handled with dependencyManagement
                // see https://github.com/spring-gradle-plugins/dependency-management-plugin/issues/8 for more complete solutions
                pomNode.dependencies.dependency.findAll {
                    it.version.text().isEmpty()
                }.each {
                    try {
                        it.replaceNode {}
                    } catch (Throwable e) {
                        // ignore
                    }
                }
            }
        }
    }
}

afterEvaluate {
    signing {
        required { isReleaseVersion && gradle.taskGraph.hasTask("publish") }
        sign publishing.publications.maven
    }
}
